!to "basic.img", plain
!al
!rl

* = $500
display_io_address = $01
redbus_mem = $0300

clc
xce ;enter native 65C816 mode
rep #$30 ; regisers are all 16bit

jmp _boot

_select_display:
lda display_io_address
mmu #$00

_initialize_display:
phx
ldx #redbus_mem

sep #$20
!as
stz $00, x      ; row = 0
stz $01, x      ; cursor x = 0
stz $02, x      ; cursor y = 0
;stz $03, x      ; cursor mode = hidden
rep #$30
!al

plx
rts

_clear_screen:
phx             ; save x to stack

ldx #redbus_mem ; index into redbus mem

sep #$20
!as
lda #" "
sta $08, x      ; blit character to use

stz $0A, x      ; start x = 0
stz $0B, x      ; start y = 0

lda #80
sta $0C, x      ; 80 columns

lda #80
sta $0D, x      ; 80 rows

lda #$01
sta $07, x      ; blit mode 1 for display

_clear_screen_wait:
lda $07, x
bne _clear_screen_wait

rep #$30
!al

plx

rts

_print:
; D  parameter3     - y
; C  parameter2     - x
; B  parameter1_H   - stringAddress
; A  parameter1_L   - stringAddress
; 9  returnH
; 8  returnL
; 7  aH
; 6  aL
; 5  xH
; 4  xL
; 3  yH
; 2  yL
; 1  dH
; 0  dL

pha     ;save registers from calle
phx     ;save registers from calle
phy     ;save registers from calle
phd     ;save registers from calle

tsx     ;store stack pointer
txy     ;store stack pointer
phy     ;store stack pointer
pld     ;store stack pointer

sep #$20
!as

ldx #$0300      ; prepare write to display
lda $0D, y      ; get parameter 3 (y)
sta $00, x      ; row
sta $02, x      ; cursur y
lda $0C, y      ; get parameter 2 (x)
sta $01, x      ; cursor x


rep #$30
!al
ldx $0A, y      ; load parameter 1 (stringAddress)
and #$00FF
adc #$0300
tay

sep #$20
!as

_print_loop:
lda $00, x              ; load character
beq _print_loop_end     ; check if terminator 0 is reached, YES: end loop
sta $10, y              ; store character into row
inx                     ; increment string address
iny                     ; increment row address
jmp _print_loop

_print_loop_end:

rep #$30
!al

pld     ;restore registers for callee
ply     ;restore registers for callee
plx     ;restore registers for callee
pla     ;restore registers for callee

rts

_boot:
jsr _init_redbus
jsr _select_display
jsr _initialize_display
jsr _clear_screen
pea $0507       ; push parameter 3 (y) and parameter 2 (x)
pea textMessage ; push parameter 1 (stringAddress)
jsr _print
pea $0608       ; push parameter 3 (y) and parameter 2 (x)
pea textMessage2; push parameter 1 (stringAddress)
jsr _print
stp


;functions which use all 16bit addressing
_init_redbus:
lda #redbus_mem
mmu #$01        ; set redbus window to memory location $300
mmu #$02        ; enable redbus
rts


;DATA
textMessage:
!text "Hello World"
!byte $0
textMessage2:
!text "This is another TestText"
!byte $0

; make sure disk is long enough
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
!byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0
